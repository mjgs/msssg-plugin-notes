name: Build, Deploy & Backup
on:
  push:
    branches: 
      - main
      - development
      - fix-*
      - feature-*
  workflow_dispatch:
    inputs:
      git_ref:
        description: Git Ref (Optional)    
        required: false
      regex:
        description: Regex for finding templates
        default: '**/*.@(md|ejs|html)'
        required: true
      deploy_enabled:
        description: Deploy after build? (yes|no)
        default: 'yes'
        required: true
      backup_enabled:
        description: Backup after deploy? (yes|no)
        default: 'no'
        required: true
      check_path:
        description: File path to check after build
        default: ''
      debug:
        description: Set DEBUG (Optional)
        required: false
      verbosity:
        description: Set ms-ssg VERBOSITY (none|info|debug|silly)
        required: true
        default: none

env:
  nodejs_version: ${{ github.event.inputs.nodejs_version || '20.4.0' }}
  deploy_enabled: ${{ github.event.inputs.deploy_enabled || 'yes' }}
  backup_enabled: ${{ github.event.inputs.backup_enabled || 'no' }}
  artifact_name: build
  dist_dir: dist
  repo_dir: repo
  scripts_dir: ${{ vars.SCRIPTS_DIR || 'scripts' }}
  scripts_repo: git@github.com-id_rsa_scripts:mjgs/build-and-deploy-scripts
  posts_repo_production: git@github.com-id_rsa_posts_prod:mjgs/personal-website-posts
  posts_repo_development: git@github.com-id_rsa_posts_dev:mjgs/personal-website-test-data
  private_deploy_key_msssg: ${{ secrets.PRIVATE_DEPLOY_KEY_MSSSG }}
  private_deploy_key_ssg: ${{ secrets.PRIVATE_DEPLOY_KEY_SSG }}
  private_deploy_key_file: ${{ secrets.PRIVATE_DEPLOY_KEY_FILE }}
  private_deploy_key_stack: ${{ secrets.PRIVATE_DEPLOY_KEY_STACK }}
  private_deploy_key_plugin_posts: ${{ secrets.PRIVATE_DEPLOY_KEY_PLUGIN_POSTS }}
 
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      clone_posts_repo: 'no'
      run_tests: 'no'
      check_path: ${{ github.event.inputs.check_path || '' }}

    steps:
      - name: Clone Deploy Repository (Latest)
        uses: actions/checkout@v3
        if: ${{ github.event.inputs.git_ref == '' }}
        with:
          path: ${{ env.repo_dir }}
 
      - name: Clone Deploy Repository (Custom Ref)
        uses: actions/checkout@v3
        if: ${{ github.event.inputs.git_ref != '' }}
        with:
          path: ${{ env.repo_dir }}
          ref: ${{ github.event.inputs.git_ref }}
 
      - name: Install Deploy Keys 
        run: $repo_dir/src/bin/installDeployKeys.sh
          
      - name: Clone Scripts Repo
        env:
          branch_to_clone: main
          tgt_dir: ${{ env.scripts_dir }}
        run: |
          mkdir -p $scripts_dir && cd $scripts_dir
          git clone -b $branch_to_clone --single-branch $scripts_repo .
          
      - name: Set Posts Repo
        run: $scripts_dir/setPostsRepo.sh
          
      # How to specify the repo??
      # Set repo path in seperate step
      #- name: Clone Posts Repo
      #  uses: actions/checkout@v3
      #  if: ${{ env.clone_posts_repo == 'yes' }} 
      #  with:
      #    path: ${{ env.posts_dir }}
      #    ref: ${{ env.branch_to_clone }}
      
      - name: Clone Posts Repo
        if: ${{ env.clone_posts_repo == 'yes' }} 
        env:
          test_mode: 'no'
          branch_to_clone: main
          posts_dir: ${{ env.repo_dir }}/_posts
        run: $scripts_dir/clonePostsRepo.sh 
 
      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.nodejs_version }}

      - name: Install NodeJS modules
        run: cd $repo_dir && npm install
 
      - name: Build Site
        env:
          SRC_DIR: ${{ github.event.inputs.src_dir || 'test/fixtures/site' }}
          OUTPUT_DIR: ../${{ env.dist_dir }}/site
          REGEX: ${{ github.event.inputs.regex || '**/*.@(md|ejs|html)' }}
          DATA_DIR: ${{ github.event.inputs.data_dir || 'test/fixtures/data' }}
          ASSETS_DIR: ${{ github.event.inputs.assets_dir || 'test/fixtures/assets' }}
          NOTES_DATA_DIR: 'test/fixtures/_posts/notes'
          HIGHLIGHTER_URL_JS: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js'
          HIGHLIGHTER_URL_CSS: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css'
          DEBUG: ${{ 'msssg-plugin-notes:*' || github.event.inputs.debug || '' }}
          VERBOSITY: ${{ github.event.inputs.verbosity || 'none' }}
          npm_build_script: ${{ github.event.inputs.npm_build_script || 'build' }}
        run: cd $repo_dir && npm run $npm_build_script
  
      - name: Run tree
        run: tree -ap $dist_dir
 
      - name: Determine build size (du -sh $dist_dir)
        run: du -sh $dist_dir
          
      - name: Check path
        if: ${{ env.check_path != '' }}
        run: ls -lah $check_path
  
      - name: Run Tests
        if: ${{ env.run_tests == 'yes' }} 
        env:
          OUTPUT_DIR: ../${{ env.dist_dir }}/site
          DEBUG: ${{ github.event.inputs.debug || '' }}
          VERBOSITY: ${{ github.event.inputs.verbosity || 'none' }}
        run: cd $repo_dir && npm test

      - name: Create build artifact
        run: $scripts_dir/createBuildArtifact.sh
  
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.artifact_name }}
          path: ${{ env.artifact_name }}.tar.gz
          retention-days: 1
 
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    
    env:
      deploy_to: staging
  
    steps:
      - name: Clone Deploy Repository (Latest)
        uses: actions/checkout@v3
        if: ${{ inputs.git_ref == '' }}
        with:
          path: ${{ env.repo_dir }}
 
      - name: Clone Deploy Repository (Custom Ref)
        uses: actions/checkout@v3
        if: ${{ inputs.git_ref != '' }}
        with:
          path: ${{ env.repo_dir }}
          ref: ${{ inputs.git_ref }}
 
      - name: Install Scripts Deploy Key
        run: $repo_dir/src/bin/installDeployKey.sh "id_rsa_scripts" "$private_deploy_key_scripts"

      - name: Clone Scripts Repo
        env:
          branch_to_clone: main
          tgt_dir: ${{ env.scripts_dir }}
        run: |
          mkdir -p $scripts_dir && cd $scripts_dir
          git clone -b $branch_to_clone --single-branch $scripts_repo .
 
      - name: Set deploy target
        if: ${{ env.deploy_enabled == 'yes' }}
        run: $scripts_dir/setDeployTarget.sh
 
      - name: Set Netlify site id (production)
        if: ${{ env.deploy_enabled == 'yes' && env.deploy_to == 'production' }}
        run: echo "NETLIFY_SITE_ID=${{ secrets.NETLIFY_SITE_ID_PRODUCTION }}" >> "$GITHUB_ENV"
 
      - name: Set Netlify site id (staging)
        if: ${{ env.deploy_enabled == 'yes' && env.deploy_to == 'staging' }}
        run: echo "NETLIFY_SITE_ID=${{ secrets.NETLIFY_SITE_ID_STAGING }}" >> "$GITHUB_ENV"
          
      - name: Set Netlify site id (development)
        if: ${{ env.deploy_enabled == 'yes' && env.deploy_to == 'development' }}
        run: echo "NETLIFY_SITE_ID=${{ secrets.NETLIFY_SITE_ID_DEVELOPMENT }}" >> "$GITHUB_ENV"

      - name: Download artifact
        if: ${{ env.deploy_enabled == 'yes' }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.artifact_name }}
 
      - name: Prepare build
        if: ${{ env.deploy_enabled == 'yes' }}
        run: $scripts_dir/prepareBuild.sh
          
      - name: Deploy using Netlify CLI
        if: ${{ env.deploy_enabled == 'yes' }}
        uses: netlify/actions/cli@master
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        with:
          args: deploy --dir=$dist_dir/site --functions=$dist_dir/functions --prod

  backup:
    name: Backup
    runs-on: ubuntu-latest
    needs: build
  
    steps:
      - name: Clone Deploy Repository (Latest)
        uses: actions/checkout@v3
        if: ${{ inputs.git_ref == '' }}
        with:
          path: ${{ env.repo_dir }}
 
      - name: Clone Deploy Repository (Custom Ref)
        uses: actions/checkout@v3
        if: ${{ inputs.git_ref != '' }}
        with:
          path: ${{ env.repo_dir }}
          ref: ${{ inputs.git_ref }}
 
      - name: Install Scripts Deploy Key
        run: $repo_dir/src/bin/installDeployKey.sh "id_rsa_scripts" "$private_deploy_key_scripts"
 
      - name: Download artifact
        if: ${{ contains(github.ref, 'main') || env.backup_enabled == 'yes' }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.artifact_name }}
 
      - name: Prepare repo
        if: ${{ contains(github.ref, 'main') || env.backup_enabled == 'yes' }}
        run: $scripts_dir/prepareRepo.sh
 
      - name: Prepare backup
        if: ${{ contains(github.ref, 'main') || env.backup_enabled == 'yes' }}
        env:
          repo_name: personal-website
        run: $scripts_dir/prepareBackup.sh
      
      - name: Upload backup to s3 bucket
        if: ${{ contains(github.ref, 'main') || env.backup_enabled == 'yes' }}
        uses: zdurham/s3-upload-github-action@master
        with:
          args: --acl private
        env:
          FILE: ${{ env.src_file }}
          AWS_REGION: 'eu-west-2'
          S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          S3_KEY: ${{ env.tgt_file }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [ deploy, backup ]
    if: always()
  
    steps:
      - name: Delete artifact
        uses: geekyeggo/delete-artifact@v2
        with:
          name: ${{ env.artifact_name }}